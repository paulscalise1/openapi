/*
 * Namf_Location
 *
 * AMF Location Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.518 V17.12.0; 5G System; Access and Mobility Management Services
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.518/
 *
 * API version: 1.2.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"time"
)

// Data within Provide Positioning Information Response
type ProvidePosInfo struct {
	LocationEstimate            *GeographicArea             `json:"locationEstimate,omitempty" yaml:"locationEstimate" bson:"locationEstimate,omitempty"`
	LocalLocationEstimate       *LocalArea                  `json:"localLocationEstimate,omitempty" yaml:"localLocationEstimate" bson:"localLocationEstimate,omitempty"`
	AccuracyFulfilmentIndicator AccuracyFulfilmentIndicator `json:"accuracyFulfilmentIndicator,omitempty" yaml:"accuracyFulfilmentIndicator" bson:"accuracyFulfilmentIndicator,omitempty"`
	// Indicates value of the age of the location estimate.
	AgeOfLocationEstimate int32 `json:"ageOfLocationEstimate,omitempty" yaml:"ageOfLocationEstimate" bson:"ageOfLocationEstimate,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimestampOfLocationEstimate *time.Time                      `json:"timestampOfLocationEstimate,omitempty" yaml:"timestampOfLocationEstimate" bson:"timestampOfLocationEstimate,omitempty"`
	VelocityEstimate            *VelocityEstimate               `json:"velocityEstimate,omitempty" yaml:"velocityEstimate" bson:"velocityEstimate,omitempty"`
	PositioningDataList         []PositioningMethodAndUsage     `json:"positioningDataList,omitempty" yaml:"positioningDataList" bson:"positioningDataList,omitempty"`
	GnssPositioningDataList     []GnssPositioningMethodAndUsage `json:"gnssPositioningDataList,omitempty" yaml:"gnssPositioningDataList" bson:"gnssPositioningDataList,omitempty"`
	Ecgi                        *Ecgi                           `json:"ecgi,omitempty" yaml:"ecgi" bson:"ecgi,omitempty"`
	Ncgi                        *Ncgi                           `json:"ncgi,omitempty" yaml:"ncgi" bson:"ncgi,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	TargetServingNode string `json:"targetServingNode,omitempty" yaml:"targetServingNode" bson:"targetServingNode,omitempty"`
	// Fully Qualified Domain Name
	TargetMmeName string `json:"targetMmeName,omitempty" yaml:"targetMmeName" bson:"targetMmeName,omitempty"`
	// Fully Qualified Domain Name
	TargetMmeRealm string        `json:"targetMmeRealm,omitempty" yaml:"targetMmeRealm" bson:"targetMmeRealm,omitempty"`
	UtranSrvccInd  bool          `json:"utranSrvccInd,omitempty" yaml:"utranSrvccInd" bson:"utranSrvccInd,omitempty"`
	CivicAddress   *CivicAddress `json:"civicAddress,omitempty" yaml:"civicAddress" bson:"civicAddress,omitempty"`
	// Specifies the measured uncompensated atmospheric pressure.
	BarometricPressure int32 `json:"barometricPressure,omitempty" yaml:"barometricPressure" bson:"barometricPressure,omitempty"`
	// Indicates value of altitude.
	Altitude float64 `json:"altitude,omitempty" yaml:"altitude" bson:"altitude,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures string `json:"supportedFeatures,omitempty" yaml:"supportedFeatures" bson:"supportedFeatures,omitempty"`
	// LMF identification.
	ServingLMFIdentification  string                   `json:"servingLMFIdentification,omitempty" yaml:"servingLMFIdentification" bson:"servingLMFIdentification,omitempty"`
	LocationPrivacyVerResult  LocationPrivacyVerResult `json:"locationPrivacyVerResult,omitempty" yaml:"locationPrivacyVerResult" bson:"locationPrivacyVerResult,omitempty"`
	AchievedQos               *MinorLocationQoS        `json:"achievedQos,omitempty" yaml:"achievedQos" bson:"achievedQos,omitempty"`
	AcceptedPeriodicEventInfo *PeriodicEventInfo       `json:"acceptedPeriodicEventInfo,omitempty" yaml:"acceptedPeriodicEventInfo" bson:"acceptedPeriodicEventInfo,omitempty"`
	HaGnssMetrics             *HighAccuracyGnssMetrics `json:"haGnssMetrics,omitempty" yaml:"haGnssMetrics" bson:"haGnssMetrics,omitempty"`
}
